1234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234512345123451234567890#include <iostream>
#include <fstream>
#include <iomanip>
using namespace std;   //  объявление пространства имен

int main(int argc, char* argv[])
{
	char ch;

	if (argc < 2) {
		cout << "insufficient files" << endl;
	}

	ofstream output;
	output.open("merged_file");

	if(!output.is_open()) {
	        cerr<< "Can't create output file :(" << endl;
	        return(-1);
	    }

	for (int i = 1; i < argc; i++){
		ifstream input;
		input.open(argv[i]);
	    if(!input.is_open()) {
	        cerr<< '\n' << argv[i] << ": Can't open to read" << endl;
	        return(-1);
	    }
		input.close();}
	for (int i = 1; i < argc; i++){
		ifstream input;
		input.open(argv[i]);
	    while((ch = input.get()) != EOF) {
	    	cout << ch;
	    	output << ch;
	    }

	    input.close();
	}
	output.close();
	cout << endl;
	cout << setw(50) << "Look for result in \"merged_file\"!" << endl;
}#include <iostream>
#include <sys/select.h> // Для функции select
#include <termios.h>    // Для функции tcgetattr
#include <sstream>
#include <iomanip>
#include <sys/ioctl.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <thread>

// Infinity loop control code
static int done = 0;
using namespace std;
namespace con {
    int comax() {
        struct winsize w;
        ioctl(0, TIOCGWINSZ, &w);
        return(w.ws_col);
    }

    int romax() {
        struct winsize w;
        ioctl(0, TIOCGWINSZ, &w);
        return(w.ws_row);
    }

    ostream& ED(ostream& s) {
        return s << string("\033[2J");
    }

    ostream& EL(ostream& s) {
        return s << string("\033[K");
    }

    class estream {
    private:
        string escape; // Escape string
    public:
    estream(string e) : escape(e) {};
    friend ostream& operator<<(ostream&, estream);
    };

    ostream& operator<<(ostream& s, estream e) {
        s << e.escape << flush;
        return s;
    }

    estream CUP(int y, int x) {
        ostringstream sout;
        sout << "\033[" << y << ";" << x << "H";
        return estream(sout.str());
    }

    estream SGR(int r) {
        ostringstream sout;
        sout << "\033[" << r << "m";
        return estream(sout.str());
    }
}

using con::CUP;
using con::ED;
using con::SGR;

void interruptor(int    signo) {
    done = signo;
    return;
}

int getchr( ) {
   struct termios oldt,
   newt;
   int ch;
   tcgetattr( STDIN_FILENO, &oldt );
   newt = oldt;
   newt.c_lflag &= ~( ICANON | ECHO );
   tcsetattr( STDIN_FILENO, TCSANOW, &newt );
   ch = getchar();
   tcsetattr( STDIN_FILENO, TCSANOW, &oldt );
   return ch;
}


int kbin() {
    char buf[512];
    int n = 0;
    int flags = fcntl(0, F_GETFL);
    usleep(1);
    fcntl(0, F_SETFL, flags | O_NONBLOCK);
    n = read (0, buf, 512);
    fcntl(0, F_SETFL, flags );
    return(n);
}



int main() {
    cout << con::CUP((con::romax()), 1);
    cout << con::ED << "Press any key to exit" << flush;

    struct termios t[2];
        tcgetattr(0, &t[0]);
        tcgetattr(0, &t[1]);
        t[0].c_lflag &= ~(ICANON | ECHO);
        tcsetattr(0, TCSAFLUSH, &t[0]);
    signal(SIGINT, interruptor);
    int fon = 41;
    int ls;

    while (1) {
        for (int i = 1; (i <= (con::comax())); i++) {
            int m = i < (con::romax() - 1) ? i : (con::romax() - 1);
            int k = i;
            for (int j = 1; j <=(m) ; j++) {
                k--;
                
                cout << CUP(j, k);
                cout << "\033[" << fon << "m ";
                if(kbin() > 0) goto aa;
            }
            cin.clear();
            usleep(5000);
            cout << flush;           
        }


        for (int j = 1; j <= (con::romax() - 1); j++){
            int l = j;
            for (int i = 1; i<=((con::romax()) - j);i++){
                

                cout << CUP(l, con::comax() - i);
                cout << "\033[" << fon << "m ";
                if(kbin() > 0) goto aa;
                l++;
            }
            cin.clear();
            usleep(5000);
            cout << flush; 
        }

        fon += 1;
        if (fon > 47) fon = 40;
    }
    aa:
        

    cout << con::SGR(0) << ED << con::EL;
    cout << "\033["<<con::romax()<<";1H" << flush;

    cout << "Program terminated." << endl;
        tcsetattr(0, TCSAFLUSH, &t[1]);

    return 0;
}
#include <stdlib.h>
#include <iostream>
using namespace std;

class Heap {
	int size;
public:
	Heap(int p): size(p){};
	int get(int p = 0) { // красивая фукнция которая при 
		size -=p;
		return (size);
	};
};

class Gambler {
protected:
    Heap* heap;
    const int limit;
    const char* name;
public:
	Gambler(Heap &p, int ii): limit(ii){ heap = &p;};
	virtual int move() = 0;
	int query();
    virtual ~Gambler(){}; // виртуальный деструктор
};

int Gambler::query(){ // запрос на кучу и имя игрока
	cout << "Heap = " << heap->get() << " " << name << " > ";
	return(heap->get()); 
}


class Man: public Gambler {
public:
	Man(Heap& h, int l, const char* n) : Gambler(h, l) { name = n; }
	virtual int move(); // virtual можно не писать
};

int Man::move() {
	int g;
	cin >> g;
	if ((g < 1) || (g > limit) || ( g > heap->get())) g = 1; // если было введено кривое значение, значение больше лимита или больше кол-ва в куче
	return (heap->get(g)); // забираем камушки из кучи
}


class Pen: public Gambler {
public:
	Pen(Heap& h, int l, const char* n) : Gambler(h, l) { name = n; }
	virtual int move(); // virtual можно не писать

};

int Pen::move() {

	int rest = 0;
	int x = 0;
	int h;
	if ((h = heap->get()) == 1) {
		cout << "1" << endl;
		return (heap->get());
	}
	while((rest = (x *limit + x + 1)) < h)
        x++;
    if((rest > h))
    {
        rest = (x - 1)*limit + x;
        heap->get(h - rest);
        cout << h - rest << "\n";
    }
    else
    {
        heap->get(1);
        cout << "1" << "\n";
    }
    return(heap->get());

    /* 
	как оно работает... если остался 1 камушек, то берём его и, получается, проигрываем
	если не 1, то в h висит остаток из кучи
	по выигрышной формуле считаем, сколько  надо взять
	если не вызодит, то берём 1, надеясь, что попадём в выигрышную позицию. последние 1 шага делаем, исходя из задания
    */
}

int main(int argc, char **argv){
	int i = 1;
    Heap h(atoi(argv[1]));

    Gambler* g[] = { new Pen(h, atoi(argv[2]), "Pen"), new Man(h, atoi(argv[2]), "Man")};
    while(g[i]->query() > 0) {
        g[i]->move();
        if(++i > 1)
            i = 0;
    }
    if(++i > 1) i = 0;
    cout << "0\n";
    g[i]->query();
    cout << "Loser\n";

    /* //ИЛИ
    while(g[i]->query() > 1) {
        g[i]->move();
        if(++i > 1)
            i = 0;
    }
    cout << "Loser\n";

    */
    delete g[0];
    delete g[1];

    return(0);
}